// Code generated by mockery v2.12.2. DO NOT EDIT.

package question

import (
	entities "Tugas-Mini-Project/entities"

	mock "github.com/stretchr/testify/mock"
)

// QuestionService is an autogenerated mock type for the QuestionService type
type QuestionService struct {
	mock.Mock
}

// CreateQuestionService provides a mock function with given fields: question
func (_m *QuestionService) CreateQuestionService(question entities.Question) (string, error) {
	ret := _m.Called(question)

	var r0 string
	if rf, ok := ret.Get(0).(func(entities.Question) string); ok {
		r0 = rf(question)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.Question) error); ok {
		r1 = rf(question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQuestionService provides a mock function with given fields: id, question
func (_m *QuestionService) DeleteQuestionService(id int, question entities.Question) (string, error) {
	ret := _m.Called(id, question)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, entities.Question) string); ok {
		r0 = rf(id, question)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entities.Question) error); ok {
		r1 = rf(id, question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllQuestionService provides a mock function with given fields:
func (_m *QuestionService) GetAllQuestionService() ([]entities.Question, error) {
	ret := _m.Called()

	var r0 []entities.Question
	if rf, ok := ret.Get(0).(func() []entities.Question); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuestionByIDService provides a mock function with given fields: id
func (_m *QuestionService) GetQuestionByIDService(id int) (entities.Question, error) {
	ret := _m.Called(id)

	var r0 entities.Question
	if rf, ok := ret.Get(0).(func(int) entities.Question); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Question)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuestionService provides a mock function with given fields: id, question
func (_m *QuestionService) UpdateQuestionService(id int, question entities.Question) (entities.Question, error) {
	ret := _m.Called(id, question)

	var r0 entities.Question
	if rf, ok := ret.Get(0).(func(int, entities.Question) entities.Question); ok {
		r0 = rf(id, question)
	} else {
		r0 = ret.Get(0).(entities.Question)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entities.Question) error); ok {
		r1 = rf(id, question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
