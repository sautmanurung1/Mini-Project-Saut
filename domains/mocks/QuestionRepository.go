// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	entities "Tugas-Mini-Project/entities"

	mock "github.com/stretchr/testify/mock"
)

// QuestionRepository is an autogenerated mock type for the QuestionRepository type
type QuestionRepository struct {
	mock.Mock
}

// CreateQuestion provides a mock function with given fields: question
func (_m *QuestionRepository) CreateQuestion(question entities.Question) error {
	ret := _m.Called(question)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Question) error); ok {
		r0 = rf(question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteQuestion provides a mock function with given fields: id, question
func (_m *QuestionRepository) DeleteQuestion(id int, question entities.Question) error {
	ret := _m.Called(id, question)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, entities.Question) error); ok {
		r0 = rf(id, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllQuestion provides a mock function with given fields:
func (_m *QuestionRepository) GetAllQuestion() ([]entities.Question, error) {
	ret := _m.Called()

	var r0 []entities.Question
	if rf, ok := ret.Get(0).(func() []entities.Question); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuestionByID provides a mock function with given fields: id, question
func (_m *QuestionRepository) GetQuestionByID(id int, question entities.Question) error {
	ret := _m.Called(id, question)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, entities.Question) error); ok {
		r0 = rf(id, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateQuestion provides a mock function with given fields: id, question
func (_m *QuestionRepository) UpdateQuestion(id int, question entities.Question) error {
	ret := _m.Called(id, question)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, entities.Question) error); ok {
		r0 = rf(id, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
