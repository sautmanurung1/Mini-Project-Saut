// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	entities "Tugas-Mini-Project/entities"

	mock "github.com/stretchr/testify/mock"
)

// AssignmentService is an autogenerated mock type for the AssignmentService type
type AssignmentService struct {
	mock.Mock
}

// CreateAssignmentService provides a mock function with given fields: assignment
func (_m *AssignmentService) CreateAssignmentService(assignment entities.Assignment) (string, error) {
	ret := _m.Called(assignment)

	var r0 string
	if rf, ok := ret.Get(0).(func(entities.Assignment) string); ok {
		r0 = rf(assignment)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.Assignment) error); ok {
		r1 = rf(assignment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssignmentService provides a mock function with given fields: id, assignment
func (_m *AssignmentService) DeleteAssignmentService(id int, assignment entities.Assignment) (string, error) {
	ret := _m.Called(id, assignment)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, entities.Assignment) string); ok {
		r0 = rf(id, assignment)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entities.Assignment) error); ok {
		r1 = rf(id, assignment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAssignmentService provides a mock function with given fields:
func (_m *AssignmentService) GetAllAssignmentService() ([]entities.Assignment, error) {
	ret := _m.Called()

	var r0 []entities.Assignment
	if rf, ok := ret.Get(0).(func() []entities.Assignment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Assignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssignmentByIdService provides a mock function with given fields: id, assignment
func (_m *AssignmentService) GetAssignmentByIdService(id int, assignment entities.Assignment) (string, error) {
	ret := _m.Called(id, assignment)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, entities.Assignment) string); ok {
		r0 = rf(id, assignment)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entities.Assignment) error); ok {
		r1 = rf(id, assignment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssignmentService provides a mock function with given fields: id, assignment
func (_m *AssignmentService) UpdateAssignmentService(id int, assignment entities.Assignment) (string, error) {
	ret := _m.Called(id, assignment)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, entities.Assignment) string); ok {
		r0 = rf(id, assignment)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entities.Assignment) error); ok {
		r1 = rf(id, assignment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
